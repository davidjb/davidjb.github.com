<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DavidJB.com</title><link href="http://davidjb.com/" rel="alternate"></link><link href="http://davidjb.com/feeds/python.atom.xml" rel="self"></link><id>http://davidjb.com/</id><updated>2012-08-24T13:41:00+10:00</updated><entry><title>Virtualenv being ignored by setuptools/Distribute/easy_install</title><link href="http://davidjb.com/blog/2012/08/virtualenv-being-ignored-by-setuptoolsdistributeeasy_install/" rel="alternate"></link><updated>2012-08-24T13:41:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2012-08-24:blog/2012/08/virtualenv-being-ignored-by-setuptoolsdistributeeasy_install/</id><summary type="html">&lt;p&gt;This one couldn't be simpler, but it's worth noting all the same. &amp;nbsp;I've just
experienced a situation where a &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/index.html"&gt;virtualenv&lt;/a&gt;&amp;nbsp; was being completely ignored by
all tools even though it was absolutely activated via &lt;tt class="docutils literal"&gt;source bin/activate&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The answer was to blow away the &lt;tt class="docutils literal"&gt;lib&lt;/tt&gt; directory within the virtualenv and
blow away the local Python interpreter at &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; and re-create the
virtualenv. After deactivating and re-activating, everything works correctly
again.&lt;/p&gt;
&lt;p&gt;I guess something in the environment (or env variables) got messed up.
Who knows; it works now.&lt;/p&gt;
</summary><category term="distribute"></category><category term="easy_install"></category><category term="virtualenv"></category></entry><entry><title>Serving TileStache (or another app) using uWSGI against a web sub-directory</title><link href="http://davidjb.com/blog/2012/06/serving-tilestache-or-another-app-using-uwsgi-against-a-web-sub-directory/" rel="alternate"></link><updated>2012-06-01T12:41:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2012-06-01:blog/2012/06/serving-tilestache-or-another-app-using-uwsgi-against-a-web-sub-directory/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://projects.unbit.it/uwsgi/"&gt;uWSGI&lt;/a&gt; is extremely promising as an application server given its huge
range of options and supported platforms. &amp;nbsp;For me, however, just getting
something seemingly simple up and running successfully was relatively
confusing. I'd like to contribute to the documentation when I can, but
thought a dedicated page about &lt;a class="reference external" href="http://tilestache.org"&gt;TileStache&lt;/a&gt; as a specific application
(and associated configuration) was warranted. It does make more sense
now, thankfully.&lt;/p&gt;
&lt;p&gt;I want to serve my TileStache application at &lt;a class="reference external" href="http://mydomain.com/tiles"&gt;http://mydomain.com/tiles&lt;/a&gt;
(taking careful note of the sub-directory present). I've chosen an
INI-style configuration for my instance and here's what the final result
looks like (loads using &lt;tt class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; my_uwsgi.ini&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;8&lt;/span&gt;
&lt;span class="na"&gt;vacuum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(home)/var/uwsgi.sock&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/opt/tilestache&lt;/span&gt;
&lt;span class="na"&gt;mount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/tiles=app.py&lt;/span&gt;
&lt;span class="na"&gt;need-app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The available options for uWSGI are extremely comprehensive and fairly
bewildering for someone just starting off. The main issue I faced was
the fact the &lt;em&gt;--module&lt;/em&gt; option doesn't support argument passing. This
was a big one because documentation like &lt;a class="reference external" href="http://projects.unbit.it/uwsgi/wiki/Quickstart"&gt;this&lt;/a&gt; shows empty rounded
brackets and the programmer in me instinctively thought of this as an
Python object call. Not so. In order to pass arguments, you either need
&lt;em&gt;--eval&lt;/em&gt; or to do what I did and create a separate file and mount that.
Where I have &lt;em&gt;app.py&lt;/em&gt; specified above, this is the definition for said
file:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;TileStache&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TileStache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGITileServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tilestache.cfg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So that's uWSGI serving TileStache. The final issue to solve is that of
serving against a sub-directory. Once you have your application mounted
against the relevant mount point (in my case &lt;em&gt;/tiles&lt;/em&gt;), then it's just a
case of telling uWSGI to use this as its &lt;strong&gt;SCRIPT_NAME&lt;/strong&gt; environment
variable.&lt;/p&gt;
&lt;p&gt;For me, this was telling our webserver (Cherokee) to provide the
&lt;strong&gt;UWSGI_SCRIPT_NAME&lt;/strong&gt;, ensuring the &lt;strong&gt;UWSGI_&lt;/strong&gt; is prepended, as a custom
environment variable against the relevant Directory behaviour. Once
Cherokee was pointed at the relevant socket and restarted, everything
'just worked'. In the case of other web servers like Nginx, it would be
a case of configuring a location with:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="err"&gt;uwsgi_param&lt;/span&gt; &lt;span class="err"&gt;SCRIPT_NAME&lt;/span&gt; &lt;span class="err"&gt;/tiles&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And there you have it.&lt;/p&gt;
</summary><category term="application"></category><category term="python"></category><category term="serving"></category><category term="uwsgi"></category><category term="web"></category><category term="wsgi"></category></entry><entry><title>mr.scripty - my new best friend</title><link href="http://davidjb.com/blog/2012/02/mr-scripty-my-new-best-friend/" rel="alternate"></link><updated>2012-02-24T08:34:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2012-02-24:blog/2012/02/mr-scripty-my-new-best-friend/</id><summary type="html">&lt;p&gt;If you're working with Buildout, then check out &lt;a class="reference external" href="http://github.com/collective/mr.scripty"&gt;mr.scripty&lt;/a&gt;, a
fantastic Buildout recipe that allows you to use Python code in
functions within its options. &amp;nbsp;This means that - in the few instances
I've used it so far - have conditional statements regarding effectively
anything.&lt;/p&gt;
&lt;p&gt;In the two examples I added to the &lt;a class="reference external" href="https://github.com/collective/mr.scripty/blob/master/mr/scripty/README.txt"&gt;source documentation&lt;/a&gt;, I go and
configure download links based upon architecture and separately,
configure some (Java) environment variables based upon which directories
exist (eg to handle different Linux distributions that might be
running). This is only the start, but it's a fantastic one.&lt;/p&gt;
&lt;p&gt;Amazing I hadn't gone looking for this earlier. Anyone know of any other
Buildout awesomeness out there?&lt;/p&gt;
</summary><category term="awesome"></category><category term="buildout"></category><category term="python"></category><category term="recipe"></category></entry><entry><title>ImportError: No module named BeautifulSoup</title><link href="http://davidjb.com/blog/2011/08/importerror-no-module-named-beautifulsoup/" rel="alternate"></link><updated>2011-08-26T12:02:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2011-08-26:blog/2011/08/importerror-no-module-named-beautifulsoup/</id><summary type="html">&lt;p&gt;Had this issue when you've been trying to run something like
&lt;a class="reference external" href="http://pypi.python.org/pypi/funnelweb"&gt;Funnelweb&lt;/a&gt;, and you hit an ImportError for BeautifulSoup?&amp;nbsp; You're
definitely not alone, because I just hit the same issue.&amp;nbsp; The answer is
simple -- just ensure that you don't use BeautifulSoup 4 or above (this
is still beta) -- it uses a different namespace, specifically bs4.
Thus, whilst you might have the BeautifulSoup egg satisfying your
dependencies, any imports of this package are going to fail.&lt;/p&gt;
&lt;p&gt;For me, I'm using buildout, so I just pinned my version of BeautifulSoup
thusly:&lt;/p&gt;
&lt;pre class="code cfg literal-block"&gt;
&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versions&lt;/span&gt;

&lt;span class="k"&gt;[versions]&lt;/span&gt;
&lt;span class="na"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3.2.0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we stop using BeautifulSoup 4.0 and everything works again.&lt;/p&gt;
</summary><category term="egg"></category><category term="error"></category><category term="import"></category><category term="packages"></category><category term="python"></category></entry><entry><title>Extracting a Buildout versions.cfg from a Zope instance script</title><link href="http://davidjb.com/blog/2011/06/extracting-a-buildout-versions-cfg-from-a-zope-instance-script/" rel="alternate"></link><updated>2011-06-02T16:07:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2011-06-02:blog/2011/06/extracting-a-buildout-versions-cfg-from-a-zope-instance-script/</id><summary type="html">&lt;p&gt;Today, I needed to migrate some legacy Plone installs set up using
Buildout. If I were to simply move the buildout files and re-run
buildout, I'd end up with the latest versions of add-on products - and
since I'm using legacy versions of Plone 3, that'd almost certainly
break the system.&amp;nbsp; I do know about the Buildout extension
&lt;a class="reference external" href="http://pypi.python.org/pypi/buildout.dumppickedversions"&gt;buildout.dumppickedversions&lt;/a&gt; (which does what its name suggests and
exports picked versions of eggs) but I can't re-run buildout to get this
extension for risk of updating existing products (what I'm trying to
avoid!).&lt;/p&gt;
&lt;p&gt;The good news is that with just one line of bash in Linux (and a bunch
of helper commands :)), you can extract all your current egg versions
from a Zope instance script (eg bin/instance), like so, running the
command in your buildout directory:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cat bin/instance1 | grep eggs | sed -r &lt;span class="s1"&gt;'s#.*eggs/(.*)-py2.[0-9].*#\1#g'&lt;/span&gt; | sed -r &lt;span class="s1"&gt;'s#-# = #g'&lt;/span&gt; | sed -r &lt;span class="s1"&gt;'s#_#-#g'&lt;/span&gt; | grep -E &lt;span class="s1"&gt;' = [0-9\.]'&lt;/span&gt; | xargs -0 &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;[versions]\n&amp;quot;&lt;/span&gt; | sed -r &lt;span class="s1"&gt;'s#^\s+##g'&lt;/span&gt; &amp;gt; versions.cfg; cat versions.cfg
&lt;/pre&gt;
&lt;p&gt;Copy the &lt;tt class="docutils literal"&gt;versions.cfg&lt;/tt&gt; to the new buildout location and make buildout
extend off it.&lt;/p&gt;
&lt;p&gt;Hopefully having &lt;a class="reference external" href="http://pypi.python.org/pypi/buildout.dumppickedversions"&gt;buildout.dumppickedversions&lt;/a&gt; in place now should
resolve doing this again if/when I'm migrating any of my new Plone
installs. (Interesting to note my current dev install uses over 320
eggs).&lt;/p&gt;
</summary><category term="buildout"></category><category term="cat"></category><category term="cfg"></category><category term="eggs"></category><category term="grep"></category><category term="plone"></category><category term="sed"></category><category term="versions"></category><category term="zope"></category></entry><entry><title>Buildout: order of 'extends' configuration files</title><link href="http://davidjb.com/blog/2011/01/buildout-order-of-extends-configuration-files/" rel="alternate"></link><updated>2011-01-06T15:00:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2011-01-06:blog/2011/01/buildout-order-of-extends-configuration-files/</id><summary type="html">&lt;p&gt;Yet another word to the wise: take care of your ordering of the
'extends' configuration files within your buildout.&amp;nbsp; It makes complete
sense, and especially so with respect to version pinning: the later
configuration's versions will be the last one applied.&lt;/p&gt;
&lt;p&gt;So, it makes a lot of sense (in hindsight!) that this configuration, and
the fact I have version pins in my base.cfg, isn't going to end well:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;
    base.cfg
    http://good-py.appspot.com/release/dexterity/1.0b2&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The Dexterity version pins are going to override the ones I have in my
base.cfg.&amp;nbsp; This ends up meaning that Plone 4's version pins get applied
first (Plone's main cfg is included in my base.cfg), then my 'custom'
pins in base.cfg, then Dexterity's over the top.&amp;nbsp; Any custom pins I had
for packages used in Dexterity's KGS just got squashed.&lt;/p&gt;
&lt;p&gt;Essentially, if it looks like Buildout isn't paying attention to your
package pins, it's not because it's being disobedient, it's likely
because something's overriding your settings.&lt;/p&gt;
</summary><category term="buildout"></category><category term="config"></category><category term="dexterity"></category><category term="extends"></category><category term="ordering"></category><category term="plone"></category></entry><entry><title>Python eggs and missing files (like 'docs')</title><link href="http://davidjb.com/blog/2011/01/python-eggs-and-missing-files-like-docs/" rel="alternate"></link><updated>2011-01-06T11:57:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2011-01-06:blog/2011/01/python-eggs-and-missing-files-like-docs/</id><summary type="html">&lt;p&gt;This is pretty trivial (and trivial to fix), but I'm chronicling it for
my knowledge as much as anyone else's.&amp;nbsp; The issue is that a given Python
egg is missing some form of files, most commonly the 'docs' directory in
my experience, because the build wasn't configured correctly.&lt;/p&gt;
&lt;p&gt;The error goes somewhat like this:&lt;/p&gt;
&lt;pre class="code pytb literal-block"&gt;
&lt;span class="x"&gt;Getting distribution for 'my.theme'.
error: docs/HISTORY.txt: No such file or directory
An error occured when trying to install my.theme 1.5.0. Look above this message for any errors that were output by easy_install.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The solution is simple: just add the relevant missing directories or
similar into your &lt;tt class="docutils literal"&gt;my.theme/MANIFEST.in&lt;/tt&gt; file, so the end results
looks like so:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="err"&gt;recursive-include&lt;/span&gt; &lt;span class="err"&gt;docs&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;
&lt;span class="err"&gt;recursive-include&lt;/span&gt; &lt;span class="err"&gt;my&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;
&lt;span class="err"&gt;global-exclude&lt;/span&gt; &lt;span class="err"&gt;*py[co],&lt;/span&gt; &lt;span class="err"&gt;*mo&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;where &lt;tt class="docutils literal"&gt;my&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; are the top-level packages I need.&lt;/p&gt;
&lt;p&gt;Just rebuild the Python egg and away we go. As I said, simple fix. Now
just have to get it stuck in my head to remember.&lt;/p&gt;
</summary><category term="build"></category><category term="docs"></category><category term="egg"></category><category term="file"></category><category term="install"></category><category term="missing"></category><category term="problem"></category><category term="python"></category></entry><entry><title>Plone/Zope, Python and collective.autoreload / plone.reload</title><link href="http://davidjb.com/blog/2009/11/plonezope-python-and-collective-autoreloadplone-reload/" rel="alternate"></link><updated>2009-11-20T14:34:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-11-20:blog/2009/11/plonezope-python-and-collective-autoreloadplone-reload/</id><summary type="html">&lt;p&gt;Here's an interesting error message I got stumped with for a good set of
hours.&amp;nbsp; The issue started with me using collective.autoreload with Plone
and it does the trick, mostly.&amp;nbsp; With any such 'operation' and live
reloading of code for Python, you've got to expect that not everything
will go according to plan.&amp;nbsp; Most things do, but one issue I found
presented with this error message:&lt;/p&gt;
&lt;pre class="code pytb literal-block"&gt;
&lt;span class="x"&gt;&amp;lt; ... huge traceback ...&amp;gt;
TypeError: super(type, obj): obj must be an instance or subtype of type&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The issue arises for me (and you'll probably see it elsewhere) when I go
ahead and modify a Python class that I've extended off from another, and
I'm calling a function from the parent class.&amp;nbsp; The browser view class
I'm extending from needs to use the same methods but extend the
functionality, so hence me calling super(...).myfunction().&amp;nbsp;&amp;nbsp; In
hindsight, the error is actually pretty logical -- the &amp;quot;obj&amp;quot; is being
shown to not be a type or subtype of the specified type.&amp;nbsp; What they
didn't spell out in bright neon letters is that whilst the type I was
working with looks the same in code (it IS the same), having it reloaded
makes it different.&lt;/p&gt;
&lt;p&gt;The solution is to restart Zope and go again.&amp;nbsp; This same thing manifests
in a number of different ways (Error 500 Internal Server Errors for
certain views, etc) but if you're seeing something weird, don't always
assume you've broken something. My favourite thought for the week
applies directly to this:&amp;nbsp; just because you hear hoofbeats, don't
immediately think zebras.&amp;nbsp; Being in IT though, it's hard to go straight
for the simplest solution.&amp;nbsp;&amp;nbsp; Might save you some head-bashing as I've
done it for you. :)&lt;/p&gt;
&lt;p&gt;As a side note, it's a similar idea as a network problem I saw the other
day.&amp;nbsp; The problem could have been solved in 5 seconds by looking at the
lights on the network port, but the &amp;quot;IT solution&amp;quot; was to restart the
computer between OSes and check if the OS was the problem.&amp;nbsp; Victims of
our own knowledge; we sadly know too much.&lt;/p&gt;
</summary><category term="code"></category><category term="collective"></category><category term="egg"></category><category term="error"></category><category term="package"></category><category term="plone"></category><category term="python"></category><category term="reload"></category><category term="restart"></category></entry><entry><title>Creating &amp; distributing a new Plone/PyPI product</title><link href="http://davidjb.com/blog/2009/08/creating-distributing-a-new-plonepypi-product/" rel="alternate"></link><updated>2009-08-17T10:01:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-08-17:blog/2009/08/creating-distributing-a-new-plonepypi-product/</id><summary type="html">&lt;p&gt;It's amazing to see how technologies can be so smoothly integrated these
days.&amp;nbsp; I'm talking, at least in this instance, about how setuptools
works with PyPI (and then Plone.org's Products section) and allows you
to distribute your product(s) to the world.&amp;nbsp; So far, I've just got the
one -- collective.portlet.googleapps -- but I'm sure time will pass and
I'll have some more useful things to contribute. Here's a summary of
what I did:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the product.&amp;nbsp; ZopeSkel is a wonderful help here for Plone
products. [I lie a little bit in my code example, because sadly, the
plone3_portlet template doesn't have nesting.&amp;nbsp; I cheated by using
the Archetypes template and copied in my portlet code &amp;amp; repeated to
create multiple portlets in one product]:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
easy_install-2.4 ZopeSkel
paster2.4 create --list-templates
paster2.4 create -t plone3_portlet collective.portlet.googleapps
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Upload it to some relevant code repository.&amp;nbsp; I've used the Plone
collective SVN (and &lt;a class="reference external" href="http://plone.org/documentation/how-to/create-a-new-project-in-the-plone-collective"&gt;this guide&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
svn mkdir https://svn.plone.org/svn/collective/collective.portlet.googleapps -m &lt;span class="s1"&gt;'Created new project'&lt;/span&gt;
svn mkdir https://svn.plone.org/svn/collective/collective.portlet.googleapps/&lt;span class="o"&gt;{&lt;/span&gt;trunk,branches,tags&lt;span class="o"&gt;}&lt;/span&gt; -m &lt;span class="s1"&gt;'Added base files'&lt;/span&gt;
svn co https://svn.plone.org/svn/collective/collective.portlet.googleapps/trunk collective.portlet.googleapps
&lt;span class="o"&gt;[&lt;/span&gt;copy stuff into the folder&lt;span class="o"&gt;]&lt;/span&gt;
svn ci
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Do some work.&amp;nbsp; When you're happy, make a tag for the relevant release
version:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
svn copy https://svn.plone.org/svn/collective/collective.portlet.googleapps/trunk https://svn.plone.org/svn/collective/collective.portlet.googleapps/tags/0.1
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi?%3Aaction=register_form"&gt;Sign up for PyPI&lt;/a&gt; (Python Package Index), &lt;a class="reference external" href="http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html"&gt;generate a GPG
key&lt;/a&gt;, and add the key ID to your account profile page.&amp;nbsp; Your key ID
can be found on this line after generation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gpg: key XXXXXXXX marked as ultimately trusted
&lt;/pre&gt;
&lt;p&gt;or otherwise through &lt;strong&gt;gpg --list-keys&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://plone.org/join_form?came_from=http%3A//plone.org"&gt;Sign up&lt;/a&gt; for an account on Plone.org to allow you to upload your
product here too.&amp;nbsp; Make sure you follow the URL you get emailed and
change your password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit your ~/.pypirc file to include the following details from &lt;a class="reference external" href="http://plone.org/documentation/tutorial/how-to-upload-your-package-to-plone.org/tutorial-all-pages"&gt;this
page&lt;/a&gt;.&amp;nbsp; My file also needed the &lt;strong&gt;server-login&lt;/strong&gt; section (something
to do with differences between PyPI and Plone.org, I think).:&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="k"&gt;[server-login]&lt;/span&gt;
&lt;span class="err"&gt;username:XXX&lt;/span&gt;
&lt;span class="err"&gt;password:YYY&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When ready, you can upload your work to PyPI and Plone.org:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
easy_install-2.4 collective.dist
python2.4 setup.py register sdist bdist_egg upload -s
python2.4 setup.py mregister sdist mupload -r plone.org
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;If everything goes according to plan, then you should see 'Response
200' back from the servers.&amp;nbsp; If not, then check the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Your passwords and user names are correct in your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.pypirc&lt;/span&gt;&lt;/tt&gt; file
(yes, it's true, they're plaintext...)&lt;/li&gt;
&lt;li&gt;Make sure your accounts on both PyPI and Plone.org are active and
actually exist.&lt;/li&gt;
&lt;li&gt;You've followed any further instructions about troubleshooting on
the links I've posted.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once done, you should be able to see your package on PyPI (and
administrate it once logged in), and see your product on Plone.org.
Keep in mind that Plone.org has an approval process that you'll have
to wait for before your product is fully visible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="easy_install"></category><category term="open source"></category><category term="plone"></category><category term="product"></category><category term="python"></category><category term="release"></category><category term="Software"></category></entry><entry><title>DateTime in Python/Zope/Plone is painful</title><link href="http://davidjb.com/blog/2009/06/datetime-in-pythonzopeplone-is-painful/" rel="alternate"></link><updated>2009-06-19T13:50:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-06-19:blog/2009/06/datetime-in-pythonzopeplone-is-painful/</id><summary type="html">&lt;p&gt;Alright, now for today's problem:&amp;nbsp; why do two dates that look different
when outputted actually end up being the same date?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; I'm not sure, but I'm pretty sure it's got something to do
with the wacky support the above-mentioned 3 products have for
timezones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The background:&lt;/strong&gt; Plone stores a DateTime object to record a user's
last login time.&amp;nbsp; It doesn't really matter what's purpose is, because
Plone (this time) isn't at fault.&amp;nbsp; The DateTime gets stored, no
worries.&amp;nbsp; The problem arises when you try to put that value back into a
DateTime object.&amp;nbsp; Now, I'd have thought it'd be as simple as doing this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'login_time'&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sourcecode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And realistically, it is.&amp;nbsp; Except that printing/using that value - at
least for me - results in a time that appears as UTC, but is reported as
being in my timezone (aka a time that's 10 hours behind since I'm
GMT+10).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The fix:&lt;/strong&gt; the time still knows its timezone correctly, so just give
it a kick:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'login_time'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toZone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Amazingly, doing a comparison (using cmp) between the original DateTime
object and it's 'corrected' version actually shows that they're the
same.&amp;nbsp; Uhuh.&lt;/p&gt;
</summary><category term="comparison"></category><category term="date"></category><category term="plone"></category><category term="problem"></category><category term="python"></category><category term="time"></category><category term="zope"></category></entry><entry><title>Buildout: Best Thing Ever?</title><link href="http://davidjb.com/blog/2009/02/buildout-best-thing-ever/" rel="alternate"></link><updated>2009-02-20T08:58:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-02-20:blog/2009/02/buildout-best-thing-ever/</id><summary type="html">&lt;p&gt;Taking a little bit of a time-out, I just have to ask the question: is
Buildout not the best thing ever? (and the people who are so very kind
to make the recipes?)&lt;/p&gt;
&lt;p&gt;It's made my work of managing our Plone infrastructure about 1000 times
simpler since moving from Instancemanager (ughhh) and having to manually
manage everything. I remember being a bit sceptical and very confused
the first time I saw a buildout configuration file and thought that I'd
never understand the thing.&lt;/p&gt;
&lt;p&gt;Far, far from it of course! Whilst a little daunting at first, buildout
has (in some/all metaphorical senses) won my heart. It couldn't be
easier to use, contrary to my initial (dis)beliefs.&lt;/p&gt;
&lt;p&gt;Today sees me convert our archaic design of manually managing our
Varnish RPMs and setup and changing it to buildout instead. Looks like
the geniuses (and there's no sarcasm here!) have made it perfectly - it
does exactly what I need it to and makes my job so much simpler.&lt;/p&gt;
</summary><category term="best thing"></category><category term="buildout"></category><category term="excellent"></category></entry><entry><title>Buildout: Trying to create a Plone/Zope instance</title><link href="http://davidjb.com/blog/2009/02/buildout-trying-to-create-a-plonezope-instance/" rel="alternate"></link><updated>2009-02-11T08:51:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-02-11:blog/2009/02/buildout-trying-to-create-a-plonezope-instance/</id><summary type="html">&lt;p&gt;Eeek...what's this mean?&lt;/p&gt;
&lt;pre class="code pytb literal-block"&gt;
&lt;span class="x"&gt;install() got an unexpected keyword argument 'allow_hosts'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;after trying to build zope2zeoserver from my buildout configuration.&lt;/p&gt;
&lt;p&gt;After some searching, I found that it was due to my bootstrap.py script
(the one the gets buildout in the first place and creates the relevant
scripts) was actually pulling down an outdated version of zc.buildout.
So, the problem results because this old version of buildout doesn't
have a clue how to handle the given argument.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; update the buildout. For me, that meant correcting the
bootstrap script, but for you, it could be a matter of using
easy_install to take care of that for you.&lt;/p&gt;
</summary><category term="bootstrap"></category><category term="buildout"></category><category term="error"></category><category term="plone"></category><category term="script"></category><category term="zope"></category></entry><entry><title>Buildout: Trying to build Pound</title><link href="http://davidjb.com/blog/2009/02/buildout-trying-to-build-pound/" rel="alternate"></link><updated>2009-02-11T08:49:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-02-11:blog/2009/02/buildout-trying-to-build-pound/</id><summary type="html">&lt;p&gt;So, trying to build &lt;tt class="docutils literal"&gt;pound&lt;/tt&gt; through a Buildout recipe was failing part of
the way through.&lt;/p&gt;
&lt;p&gt;Two problems and their solutions (not necessarily in that order):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Needed to install &lt;strong&gt;libssl-dev&lt;/strong&gt; because &lt;strong&gt;lcrypto&lt;/strong&gt; was missing
(ambiguity anyone?) - Synaptic says that the package provides &amp;quot;libssl
and libcrypto development libraries, header files and manpages&amp;quot; (but
never mind a search for `libcrypto`…)&lt;/li&gt;
&lt;li&gt;Had to correct the relevant user that the recipe was telling pound to
build as.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first point was pretty silly and the second one was just clearly my
copy-and-paste mistake.&lt;/p&gt;
</summary><category term="buildout"></category><category term="pound"></category><category term="recipe"></category></entry><entry><title>Buildout and Version Problems</title><link href="http://davidjb.com/blog/2009/01/buildout-and-version-problems/" rel="alternate"></link><updated>2009-01-06T16:35:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2009-01-06:blog/2009/01/buildout-and-version-problems/</id><summary type="html">&lt;p&gt;Two blog entries in one day - wow it's been a good work day.&lt;/p&gt;
&lt;p&gt;Just a quick chronicle of my thoughts: version conflicts in buildout
aren't always pretty. My latest escapade into trying to load up Varnish
through zc.buildout resulted in a hair-tearing out message:&lt;/p&gt;
&lt;pre class="code pytb literal-block"&gt;
&lt;span class="x"&gt;An internal error occured due to a bug in either zc.buildout or in a
recipe being used:
&lt;/span&gt;&lt;span class="gt"&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;span class="gr"&gt;File &amp;quot;/tmp/tmp8o-_PD/zc.buildout-1.1.1-py2.4.egg/zc/buildout/buildout.py&amp;quot;, line 1477, in main
File &amp;quot;/tmp/tmp8o-_PD/zc.buildout-1.1.1-py2.4.egg/zc/buildout/buildout.py&amp;quot;, line 346, in install
File &amp;quot;/tmp/tmp8o-_PD/zc.buildout-1.1.1-py2.4.egg/zc/buildout/buildout.py&amp;quot;, line 857, in getitem
File &amp;quot;/tmp/tmp8o-_PD/zc.buildout-1.1.1-py2.4.egg/zc/buildout/buildout.py&amp;quot;, line 938, in _initialize
File &amp;quot;/tmp/tmp8o-_PD/zc.buildout-1.1.1-py2.4.egg/zc/buildout/buildout.py&amp;quot;, line 901, in _install_and_load
File &amp;quot;/usr/lib/python2.4/site-packages/setuptools-0.6c9-py2.4.egg/pkg_resources.py&amp;quot;, line 277, in load_entry_point
return get_distribution(dist).load_entry_point(group, name)
File &amp;quot;/usr/lib/python2.4/site-packages/setuptools-0.6c9-py2.4.egg/pkg_resources.py&amp;quot;, line 2179, in load_entry_point
raise ImportError(&amp;quot;Entry point %r not found&amp;quot; % ((group,name),))
ImportError&lt;/span&gt;: &lt;span class="n"&gt;Entry point ('zc.buildout', 'default') not found&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What??? What's that supposed to mean?&lt;/p&gt;
&lt;p&gt;Turns out I managed to stumble upon the cause: our local PyPi repository
had actually already had an old version of the plone.recipe.varnish
source on it and my buildout needed the latest version. Even though I'd
directed buildout to seek out such version, my cache folder already
thought it was satisfied.&lt;/p&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Remove the old version from the cache and stick the new version into the
local PyPi.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="buildout"></category><category term="easy_install"></category><category term="python"></category></entry></feed>