<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DavidJB.com</title><link href="http://davidjb.com/" rel="alternate"></link><link href="http://davidjb.com/feeds/plon.atom.xml" rel="self"></link><id>http://davidjb.com/</id><updated>2011-03-08T10:01:00+10:00</updated><entry><title>Increasing Plone’s session timeout</title><link href="http://davidjb.com/blog/2011/03/increasing-plones-session-timeout/" rel="alternate"></link><updated>2011-03-08T10:01:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2011-03-08:blog/2011/03/increasing-plones-session-timeout/</id><summary type="html">&lt;p&gt;What you may notice if you&amp;#8217;re developing with Plone/Zope, is that if
you&amp;#8217;re storing small pieces of data within Plone&amp;#8217;s session variable (the
session_data_manager tool), data expires after a few minutes.&amp;nbsp; By
default, this timeout is 20 minutes, but is far too short if you&amp;#8217;re
expecting the information stored to last for say the whole time a user
is logged in.&amp;nbsp; In this situation, you&amp;#8217;ll need to increase the&amp;nbsp;timeout.&lt;/p&gt;
&lt;p&gt;Documentation on changing the session timeout is potentially a little
sketchy (Google &amp;#8220;session-timeout-minutes zope&amp;#8221;), but it&amp;#8217;s clear that you
need to change the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;session-timeout-minutes&lt;/span&gt;&lt;/tt&gt; directive in your
&lt;tt class="docutils literal"&gt;zope.conf&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s not immediately obvious is how to make a session persist
indefinitely (until server reboot), but this can be achieved by setting
the value to 0. Within a buildout environment for Plone, adding this
under your Plone&amp;#8217;s instance section will add the configuration to your&amp;nbsp;zope.conf.&lt;/p&gt;
&lt;pre class="code cfg literal-block"&gt;
&lt;span class="k"&gt;[instance]&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;zope-conf-additional&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;
    session-timeout-minutes 0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There are obviously implications for performance and other issues
associated with persisting session data like this, but for arguments
sake, let&amp;#8217;s say we&amp;#8217;ve considered them.&amp;nbsp; You&amp;#8217;ll probably also want to
consider deleting session data stored like this on logout (see &lt;a class="reference external" href="http://collective-docs.plone.org/sessions/session_variables.html"&gt;Session
Variables&lt;/a&gt; in the Plone collective documentation) but that&amp;#8217;s dependant
on your use&amp;nbsp;case.&lt;/p&gt;
</summary><category term="buildout"></category><category term="plone"></category><category term="session"></category><category term="timeout"></category><category term="zope"></category></entry><entry><title>Plone and Dexterity: Working with computed fields</title><link href="http://davidjb.com/blog/2010/04/plone-and-dexterity-working-with-computed-fields/" rel="alternate"></link><updated>2010-04-19T14:03:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2010-04-19:blog/2010/04/plone-and-dexterity-working-with-computed-fields/</id><summary type="html">&lt;p&gt;Today, we&amp;#8217;re looking at how to utilise computed fields within a
Dexterity-based content type. The specific use-case is that of having
two separate fields (first name and surname, for a Person type, for
example) generate the complete object title. The first part of this &amp;#8212;
having the title of the content displayed correctly &amp;#8212; is pretty
straight forward once you know what documentation to read and understand
how things happen. The second part &amp;#8212; having the &lt;span class="caps"&gt;ID&lt;/span&gt; of the content
correctly generated to be first name/surname is slightly more&amp;nbsp;complicated.&lt;/p&gt;
&lt;div class="section" id="title-computation-and-display"&gt;
&lt;h2&gt;Title computation and&amp;nbsp;display&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s look at the first part.&amp;nbsp; What we need is a custom content class,
and this is documented in the &lt;a class="reference external" href="http://plone.org/products/dexterity/documentation/manual/developer-manual/advanced/classes"&gt;Dexterity Developer Manual&lt;/a&gt;.&amp;nbsp; As per the
documentation, you need to create a class and derive it off from either
Item or Container, depending on what your content originally is.&amp;nbsp; Then,
specify your new class as the &amp;#8216;klass&amp;#8217; in your relevant type &lt;span class="caps"&gt;XML&lt;/span&gt; file in
your GenericSetup&amp;nbsp;profile.&lt;/p&gt;
&lt;p&gt;Now, with an empty class definition, like in the manual page, you can
start to add your computed fields. Your class might look something like
this (don&amp;#8217;t worry, I&amp;#8217;ll&amp;nbsp;explain):&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Customised Person content class&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nd"&gt;&amp;#64;property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'first_names'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'surname'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_names&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;surname&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So, we have our relevant function defined and decorated to be a
property. I&amp;#8217;ve found that in at least this specific use-case (setting
the title from other fields), that this method is getting called before
the object&amp;#8217;s fields are instantiated. Hence the presence of the hasattr&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Now, having a setTitle function seems a bit odd yes? Especially so since
it doesn&amp;#8217;t do anything meaningful at all. Odds are that you probably
won&amp;#8217;t need this type of function &lt;em&gt;unless&lt;/em&gt; you&amp;#8217;re like me and needing to
set the &lt;strong&gt;title&lt;/strong&gt; specifically. The reason you need it for the title
attribute is because you&amp;#8217;ve got &amp;#8220;def title(self)&amp;#8221; as a function and your
default DublinCore functionality (called by Dexterity &amp;#64;
plone.dexterity.content, line 221, in __init__) attempts to
initialise the title, amongst other &lt;span class="caps"&gt;DC&lt;/span&gt; metadata.&amp;nbsp;Interesting!&lt;/p&gt;
&lt;p&gt;So, without a setTitle function, attempting to create a new instance of
your content fails with a &amp;#8220;AttributeError: can&amp;#8217;t set attribute&amp;#8221; error
because &lt;span class="caps"&gt;DC&lt;/span&gt; (Module Products.CMFDefault.DublinCore, line 369, in
setTitle) wants to set the title. Sorry, it can&amp;#8217;t do this (we don&amp;#8217;t want
it to, and it physically can&amp;#8217;t), so we override what would be the
default setTitle function to do nothing at&amp;nbsp;all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="correct-id-at-creation-time-from-computed-title"&gt;
&lt;h2&gt;Correct &lt;span class="caps"&gt;ID&lt;/span&gt; at creation time from computed&amp;nbsp;title&lt;/h2&gt;
&lt;p&gt;Now, this one&amp;#8217;s a little trickier. Unfortunately, there&amp;#8217;s no
documentation that I could find on the web about doing this, save a
&lt;a class="reference external" href="http://n2.nabble.com/Dexterity-computed-fields-td3498400.html"&gt;very short thread&lt;/a&gt; on Nabble. In that thread, Martin Aspeli provides
some good pointers to this very use-case, but the example of
INameFromTitle provides the title as a field, rather than a function
(and isn&amp;#8217;t specifically registered as an&amp;nbsp;adapter).&lt;/p&gt;
&lt;p&gt;After a bit of poking and prodding, here&amp;#8217;s my&amp;nbsp;solution:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plone.app.content.interfaces&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;INameFromTitle&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;INameFromPersonNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INameFromTitle&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return a processed title&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameFromPersonNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;implements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INameFromPersonNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;

    &lt;span class="nd"&gt;&amp;#64;property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_names&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;surname&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So, we extend off from the default functionality, making sure that our
title function is going to override the title field that&amp;#8217;s in
INameFromTitle by default. Then, we create our adapter and return the
processed title (function decorated as a property). No need for hasattr
checks here; the object is already&amp;nbsp;initialised.&lt;/p&gt;
&lt;p&gt;Then, register this in some &lt;span class="caps"&gt;ZCML&lt;/span&gt;, where the &amp;#8216;for&amp;#8217; is the Dexterity
interface class and the latter two attributes are the classes we just&amp;nbsp;specified:&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;adapter&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sample.project.person.ISamplePerson&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;provides=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sample.project.person.INameFromPersonNames&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;factory=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sample.project.person.NameFromPersonNames&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then, the magic of inheritance takes over and the relevant code that
would normally generate the &lt;span class="caps"&gt;ID&lt;/span&gt; off from the title field comes from the
processed title.&amp;nbsp;Tada!&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Put all these things together with Dexterity and that&amp;#8217;s it. I&amp;#8217;m still in
the process of doing this, but you should be able to apply the same
processes to other fields. Just watch out for DublinCore initialisation.
If you see that sort of error message about a setXXX function and
attribute, then you&amp;#8217;ll know what to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note to self:&lt;/strong&gt; the reason I didn&amp;#8217;t use a behaviour here is because
things like INameFromTitle give us a field (see source file). We don&amp;#8217;t
want this, but rather just programmatic generation of the&amp;nbsp;title.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="computation"></category><category term="content"></category><category term="dexterity"></category><category term="extension"></category><category term="function"></category><category term="plone"></category><category term="product"></category><category term="python"></category></entry><entry><title>Wget a Plone site (and make it actually work)</title><link href="http://davidjb.com/blog/2010/02/wget-a-plone-site-and-make-it-actually-work/" rel="alternate"></link><updated>2010-02-25T15:01:00+10:00</updated><author><name>davidjb</name></author><id>tag:davidjb.com,2010-02-25:blog/2010/02/wget-a-plone-site-and-make-it-actually-work/</id><summary type="html">&lt;p&gt;There&amp;#8217;s a lot of different resources and posts on the
web about how to export a Plone site to static html content, but no
methodology would actually solve all of my problems. Now, Plone is
inherently a complicated beast, given just how much it does, and that&amp;#8217;s
definitely putting it lightly. But here goes at my attempt to provide an
actual, workable solution.&amp;nbsp; Word for the wise though, this is for more
than just your front-end administrator to handle.&amp;nbsp; Also, instructions
are designed for Ubuntu 9.10.&amp;nbsp; Mileage may/will vary on other distros or&amp;nbsp;OSes.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Needs to get all pages, including default views of folders,&amp;nbsp;correctly&lt;/li&gt;
&lt;li&gt;Needs to rewrite all links to be relative, because I want to run the
site locally on &lt;span class="caps"&gt;CD&lt;/span&gt;/&lt;span class="caps"&gt;DVD&lt;/span&gt; (or move it&amp;nbsp;anywhere)&lt;/li&gt;
&lt;li&gt;Should get all the &lt;span class="caps"&gt;CSS&lt;/span&gt; from the site, and images from the&amp;nbsp;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Doesn&amp;#8217;t have to be in 1 command (relaxed to make life easy ;-)&amp;nbsp;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to"&gt;
&lt;h2&gt;How&amp;nbsp;to&lt;/h2&gt;
&lt;p&gt;Issues I&amp;#8217;ve had with other methods (specifically, wget options) either
don&amp;#8217;t get the right pages, manage to ignore default folder views, or
other random problems.&amp;nbsp; Here&amp;#8217;s my take on the situation &amp;#8212; it&amp;#8217;s not a
one-click solution, but it worked for&amp;nbsp;me:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go into your site and change all portal_css entries&amp;#8217; Render Type to
&amp;#8216;Link&amp;#8217;.&amp;nbsp; This solves issues with wget and &amp;#64;import for&amp;nbsp;&lt;span class="caps"&gt;CSS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Make invisible any actions in portal_actions that you don&amp;#8217;t want
saved.&amp;nbsp; For example, &amp;#8220;Register&amp;#8221; and &amp;#8220;Contact&amp;#8221; might want to be hidden
as they won&amp;#8217;t be useful on a static&amp;nbsp;site.&lt;/li&gt;
&lt;li&gt;When ready, run the following script on your site (thanks to
&lt;a class="reference external" href="http://kiilerix.blogspot.com/2008/10/mirroring-plone-site.html"&gt;kiilerex&lt;/a&gt; for the wget command):
&lt;a class="reference external" href="https://github.com/jcu-eresearch/static-plone-wget"&gt;https://github.com/jcu-eresearch/static-plone-wget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Looking inside the bash script, you&amp;#8217;ll see uses wget to download the
site, then gets a list of images referenced within the &lt;span class="caps"&gt;CSS&lt;/span&gt; files, and
downloads them accordingly to the location where the &lt;span class="caps"&gt;CSS&lt;/span&gt; file(s)
are.&amp;nbsp; Then, it corrects your &lt;span class="caps"&gt;CSS&lt;/span&gt; files to have relative URLs, rather
than absolute as does Plone by&amp;nbsp;default.&lt;/li&gt;
&lt;li&gt;Your site should now be ready for distribution to any web location or
distribution&amp;nbsp;media!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please let me know if there&amp;#8217;s any problems with the script. It&amp;#8217;s on GitHub
at &lt;a class="reference external" href="https://github.com/jcu-eresearch/static-plone-wget"&gt;https://github.com/jcu-eresearch/static-plone-wget&lt;/a&gt; so go crazy and
fork as you&amp;#8217;d&amp;nbsp;like.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cd"></category><category term="content"></category><category term="download"></category><category term="dvd"></category><category term="export"></category><category term="media"></category><category term="offline"></category><category term="plone"></category><category term="site"></category><category term="static"></category><category term="wget"></category></entry></feed>